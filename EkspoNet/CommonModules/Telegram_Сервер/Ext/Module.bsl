
Процедура ПрочитатьСообщенияПользователя() Экспорт
	
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	// Установка соединения
	Источник = "bot" + СтруктураНастроек.token + "/getUpdates";
	HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Источник);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Данные = ДесериализоватьJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если Данные.ok И Данные.result.Количество() > 0 Тогда
			// Записываем историю сообщений
			
			Для Каждого СтрокаМассива Из Данные.result Цикл
				
				СообщениеID = СтрокаМассива.update_id;
				Если ПроверитьНаличиеСообщенияПоID(СообщениеID) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаМассива.Свойство("message") Тогда
					Команда = СтрокаМассива.message.text;
					ЗаписатьИсториюСообщений(СтрокаМассива.message, СообщениеID, Команда, СтрокаМассива.message.from.id);
					ОбработатьОтветПользователя(Команда, СтруктураНастроек, СтрокаМассива.message, СообщениеID);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщение(ID_Пользователя, ТекстСообщения)
	
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ID_Пользователя, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ТекстСообщения;
	HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Приемник);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	
	ЗаписатьИсториюОтветов(ТекстСообщения, "Экспонат", "", ID_Пользователя);
	
КонецПроцедуры

Процедура ОбработатьОтветПользователя(Команда, СтруктураНастроек, СтруктураСообщения, СообщениеID)
	
	//Отзыв = ЗапросОтзыва(СтруктураСообщения.from.id);
	
	Если Команда = "/start" Тогда
		
	ОтветСистемы = "Доброго времени суток! Я — бот для отслеживания информации по экспонатам на хранении. Для начала работы войди в аккуант командой /log.";      
	
	Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
	HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Приемник);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	
	ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
	
	ИначеЕсли Команда = "/log" Тогда
		
		ОтветСистемы = "Укажите свой логин в системе, в формате Логин:<Значение>";
		
		Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
		HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		HTTPЗапрос = Новый HTTPЗапрос(Приемник);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		
		ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
			
		ИначеЕсли ВРег(Лев(Команда, 6)) = "ЛОГИН:" Тогда
		
		// Извлекаем логин из команды
		ЛогинПользователя = СокрЛП(Сред(Команда, 7));
		
		// Выполняем запрос к справочнику Пользователи
		Запрос = Новый Запрос;
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Логин = &Логин";				  
						  
		Запрос.УстановитьПараметр("Логин", ЛогинПользователя);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		// Проверяем, найден ли пользователь
		Если РезультатЗапроса.Следующий() Тогда
			// Пользователь найден, сохраняем ссылку
			ПолучательУведомлений = РезультатЗапроса.Ссылка;
			
			// Ответ системы
			ОтветСистемы = "Отлично, теперь мы сможем отправлять вам спам";

			// Продолжение вашего кода для работы с пользователем Telegram
			ВернутьСоздатьПользователяTelegram(СтруктураСообщения.from.username + " " + СтруктураСообщения.chat.first_name, СтруктураСообщения.from.id, ПолучательУведомлений);
			
			Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
			HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
			HTTPЗапрос = Новый HTTPЗапрос(Приемник);
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
			
			ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
		
		Иначе
			// Если пользователь не найден
			ОтветСистемы = "Пользователь с логином " + ЛогинПользователя + " не найден.";
			
			Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
			HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
			HTTPЗапрос = Новый HTTPЗапрос(Приемник);
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
			
			ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
		КонецЕсли;
		
	ИначеЕсли Команда = "/storage" Тогда
		
		// Проверяем, зарегистрирован ли пользователь
        Если НЕ ПользовательЗарегистрирован(СтруктураСообщения.from.id) Тогда
            ОтветСистемы = "Доступ запрещен. Пожалуйста, войдите для использования этой команды.";
            Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
            HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
            HTTPЗапрос = Новый HTTPЗапрос(Приемник);
            Ответ = HTTPСоединение.Получить(HTTPЗапрос);
            ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
            
            Возврат; // Прекращаем выполнение команды /search, если пользователь не зарегистрирован
        КонецЕсли;

		СписокЭкспонатов = ПолучитьСписокЭкспонатов(СтруктураСообщения.from.id);
		
		Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + СписокЭкспонатов;
		HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		HTTPЗапрос = Новый HTTPЗапрос(Приемник);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		
		ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
		
	ИначеЕсли Команда = "/search" Тогда
		
		// Проверяем, зарегистрирован ли пользователь
        Если НЕ ПользовательЗарегистрирован(СтруктураСообщения.from.id) Тогда
            ОтветСистемы = "Доступ запрещен. Пожалуйста, войдите для использования этой команды.";
            Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
            HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
            HTTPЗапрос = Новый HTTPЗапрос(Приемник);
            Ответ = HTTPСоединение.Получить(HTTPЗапрос);
            ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
            
            Возврат; // Прекращаем выполнение команды /search, если пользователь не зарегистрирован
        КонецЕсли;

        // Если пользователь зарегистрирован, продолжаем выполнение команды
        ОтветСистемы = "Укажите номер гос. учета экспоната, используя формат: ИД:<Значение>";
        
        Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
        HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
        HTTPЗапрос = Новый HTTPЗапрос(Приемник);
        Ответ = HTTPСоединение.Получить(HTTPЗапрос);
        
        ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);

		
    ИначеЕсли ВРег(Лев(Команда, 3)) = "ИД:" Тогда
		
		// Проверяем, зарегистрирован ли пользователь
        Если НЕ ПользовательЗарегистрирован(СтруктураСообщения.from.id) Тогда
            ОтветСистемы = "Доступ запрещен. Пожалуйста, войдите для использования этой команды.";
            Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
            HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
            HTTPЗапрос = Новый HTTPЗапрос(Приемник);
            Ответ = HTTPСоединение.Получить(HTTPЗапрос);
            ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
            
            Возврат; // Прекращаем выполнение команды /search, если пользователь не зарегистрирован
        КонецЕсли;

        // Если пользователь зарегистрирован, продолжаем выполнение команды
		
		Идентификатор = СокрЛП(Сред(Команда, 4));
        ДанныеЭкспоната = ПолучитьЭкспонатПоИдентификатору(Идентификатор);
        
        Если ДанныеЭкспоната = "" Тогда
            ОтветСистемы = "Экспонат с указанным идентификатором не найден.";
        Иначе
            ОтветСистемы = ДанныеЭкспоната;
        КонецЕсли;

        Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
        HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
        HTTPЗапрос = Новый HTTPЗапрос(Приемник);
        Ответ = HTTPСоединение.Получить(HTTPЗапрос);
        
        ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);     
		
		
	Иначе 
		
		ОтветСистемы = "Такой команды нет";
		
		Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
		HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		HTTPЗапрос = Новый HTTPЗапрос(Приемник);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		
		ЗаписатьИсториюОтветов(ОтветСистемы, Команда, СообщениеID, СтруктураСообщения.from.id);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросОтзыва(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_ИсторияСообщенийСрезПоследних.Сообщение КАК Сообщение,
		|	Telegram_ИсторияСообщенийСрезПоследних.Команда КАК Команда
		|ИЗ
		|	РегистрСведений.Telegram_ИсторияСообщений.СрезПоследних КАК Telegram_ИсторияСообщенийСрезПоследних
		|ГДЕ
		|	Telegram_ИсторияСообщенийСрезПоследних.Пользователь = &Пользователь
		|	И Telegram_ИсторияСообщенийСрезПоследних.ВидСообщения = &ВидСообщения
		|	И Telegram_ИсторияСообщенийСрезПоследних.Команда = ""Отзыв""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Telegram_ИсторияСообщенийСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.Telegram_ВидСообщения.Исходящее);
	Запрос.УстановитьПараметр("Пользователь", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Команда = "Отзыв" Тогда
			Структура = Новый Структура;
			Структура.Вставить("ЭтоОтзыв", Истина);
			Структура.Вставить("НомерЗаказа", ВыборкаДетальныеЗаписи.Сообщение);
			
			Возврат Структура;
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("ЭтоОтзыв", Ложь);
	
	Возврат Структура;
	
КонецФункции

Функция ЗаписатьJS(СтруктураJS)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураJS);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции // ЗаписатьJS()

Процедура ОтправитьСообщениеОПриемеЭкспоната() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_Пользователи.ИмяПользователяТелеграм КАК ИмяПользователяТелеграм,
		|	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя,
		|	Экспонаты.Ссылка КАК Ссылка,
		|	Экспонаты.ДатаИВремяПриемки КАК ДатаИВремяПриемки,
		|	Экспонаты.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Экспонаты КАК Экспонаты
		|		ПО Telegram_Пользователи.ПолучательУведомлений = Экспонаты.ПолучательУведомлений
		|ГДЕ
		|	НЕ Экспонаты.УведомлениеОПриемкеЭкспоната
		|	И НЕ Telegram_Пользователи.ID_Пользователя ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл             
		//!!!
		ТекстСообщения = "Экспонат №" + ВыборкаДетальныеЗаписи.Идентификатор + " прибыл в хранилище. Дата прибытия: " + Формат(ВыборкаДетальныеЗаписи.ДатаИВремяПриемки,"ДЛФ=DD");
		ОтправитьСообщение(ВыборкаДетальныеЗаписи.ID_Пользователя, ТекстСообщения);
		
		ЭкспонатОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЭкспонатОбъект.УведомлениеОПриемкеЭкспоната = ИСТИНА;
		ЭкспонатОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщениеООтправкеЭкспоната() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_Пользователи.ИмяПользователяТелеграм КАК ИмяПользователяТелеграм,
		|	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя,
		|	Экспонаты.Ссылка КАК Ссылка,
		|	Экспонаты.ДатаИВремяПриемки КАК ДатаИВремяПриемки,
		|	Экспонаты.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Экспонаты КАК Экспонаты
		|		ПО Telegram_Пользователи.ПолучательУведомлений = Экспонаты.ПолучательУведомлений
		|ГДЕ
		|	НЕ Экспонаты.УведомлениеООтправкеЭкспоната
		|	И НЕ Telegram_Пользователи.ID_Пользователя ЕСТЬ NULL
		|	И Экспонаты.ЭкспонатОтправлен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения = "Экспонат №" + ВыборкаДетальныеЗаписи.Идентификатор + " покинул хранилище.";
		ОтправитьСообщение(ВыборкаДетальныеЗаписи.ID_Пользователя, ТекстСообщения);
		
		ЭкспонатОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЭкспонатОбъект.УведомлениеООтправкеЭкспоната = ИСТИНА;
		ЭкспонатОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбщиеФункции

Функция ПолучитьНастройкиTelegram() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяБота", "");
	СтруктураНастроек.Вставить("token", "");
	СтруктураНастроек.Вставить("api", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_Настройки.ИмяБота КАК ИмяБота,
		|	Telegram_Настройки.api КАК api,
		|	Telegram_Настройки.token КАК token
		|ИЗ
		|	РегистрСведений.Telegram_Настройки КАК Telegram_Настройки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Выборка);
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ДесериализоватьJSON(СтрокаJSON)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция ПроверитьНаличиеСообщенияПоID(ID_Сообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_ИсторияСообщений.Период КАК Период
		|ИЗ
		|	РегистрСведений.Telegram_ИсторияСообщений КАК Telegram_ИсторияСообщений
		|ГДЕ
		|	Telegram_ИсторияСообщений.ID_Сообщения = &ID_Сообщения";
	
	Запрос.УстановитьПараметр("ID_Сообщения", ID_Сообщения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьИсториюСообщений(СтруктураСообщения, ID_Сообщения, Команда, ID_Пользователя)
	
	МенеджерЗаписи = РегистрыСведений.Telegram_ИсторияСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Сообщение = СокрЛП(СтруктураСообщения.text);
	МенеджерЗаписи.Команда = Команда;
	МенеджерЗаписи.Пользователь = ID_Пользователя;
	МенеджерЗаписи.ВидСообщения = Перечисления.Telegram_ВидСообщения.Входящее;
	МенеджерЗаписи.ID_Сообщения = ID_Сообщения;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИсториюОтветов(ОтветСистемы, Команда, ID_Сообщения, ID_Пользователя)
	
	МенеджерЗаписи = РегистрыСведений.Telegram_ИсторияСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Сообщение = ОтветСистемы;
	МенеджерЗаписи.Команда = Команда;
	МенеджерЗаписи.Пользователь = ID_Пользователя;
	МенеджерЗаписи.ВидСообщения = Перечисления.Telegram_ВидСообщения.Исходящее;
	МенеджерЗаписи.ID_Сообщения = ID_Сообщения;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ВернутьСоздатьПользователяTelegram(ИмяПользователя, ID_Пользователя, ПолучательУведомлений = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Telegram_Пользователи.ПолучательУведомлений КАК ПолучательУведомлений
		|ИЗ
		|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
		|ГДЕ
		|	Telegram_Пользователи.ID_Пользователя = &ID_Пользователя";
	
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.Telegram_Пользователи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИмяПользователяТелеграм = ИмяПользователя;
		МенеджерЗаписи.ПолучательУведомлений = ПолучательУведомлений;
		МенеджерЗаписи.ID_Пользователя = ID_Пользователя;
		МенеджерЗаписи.Записать(ИСТИНА);
		
		Возврат ПолучательУведомлений;
		
	КонецЦикла;
	
	МенеджерЗаписи = РегистрыСведений.Telegram_Пользователи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяПользователяТелеграм = ИмяПользователя;
	МенеджерЗаписи.ПолучательУведомлений = ПолучательУведомлений;
	МенеджерЗаписи.ID_Пользователя = ID_Пользователя;
	МенеджерЗаписи.Записать(ИСТИНА);
	
	Возврат ПолучательУведомлений;
	
КонецФункции

Функция ПолучитьСписокЭкспонатов(ID)
	
	Сообщение = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Экспонаты.Идентификатор КАК Идентификатор,
		|	Экспонаты.НазваниеЭкспоната КАК НазваниеЭкспоната,
		|	Экспонаты.ДатаИВремяПриемки КАК ДатаИВремяПриемки,
		|	Экспонаты.ПолучательУведомлений КАК ПолучательУведомлений,
		|	ЭкспонатыНаСкладахОстатки.Ячейка КАК Ячейка
		|ИЗ
		|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭкспонатыНаСкладах.Остатки КАК ЭкспонатыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Экспонаты КАК Экспонаты
		|			ПО ЭкспонатыНаСкладахОстатки.Экспонат = Экспонаты.Ссылка
		|		ПО Telegram_Пользователи.ПолучательУведомлений = ЭкспонатыНаСкладахОстатки.Экспонат.ПолучательУведомлений
		|ГДЕ
		|	Telegram_Пользователи.ID_Пользователя = &ID_Пользователя
		|	И ЭкспонатыНаСкладахОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("ID_Пользователя", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Сообщение + "Название экспоната: " + ВыборкаДетальныеЗаписи.НазваниеЭкспоната + Символы.ПС +
			"Идентификатор: " + ВыборкаДетальныеЗаписи.Идентификатор + Символы.ПС +
			"Дата приемки: " + Формат(ВыборкаДетальныеЗаписи.ДатаИВремяПриемки, "ДЛФ=DD") + Символы.ПС +
			"Ячейка: " + ВыборкаДетальныеЗаписи.Ячейка + Символы.ПС +
			"-----------------------------" + Символы.ПС;
	КонецЦикла;
	
	Сообщение = СокрЛП(Сообщение);
	Если Сообщение = "" Тогда
		Сообщение = "К вашей учетке не привязаны уведомления по экспонатам";
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция ПолучитьЭкспонатПоИдентификатору(Идентификатор)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Экспонаты.Идентификатор КАК Идентификатор,
        |	Экспонаты.НазваниеЭкспоната КАК Название,
        |	Экспонаты.ДатаИВремяПриемки КАК ДатаПриемки,
        |	Экспонаты.Описание КАК Описание,
        |	ЭкспонатыНаСкладахОстатки.Ячейка КАК Ячейка
        |ИЗ
        |	РегистрНакопления.ЭкспонатыНаСкладах.Остатки КАК ЭкспонатыНаСкладахОстатки
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Экспонаты КАК Экспонаты
        |		ПО ЭкспонатыНаСкладахОстатки.Экспонат = Экспонаты.Ссылка
        |ГДЕ
        |	Экспонаты.Идентификатор = &Идентификатор
        |	И ЭкспонатыНаСкладахОстатки.КоличествоОстаток > 0
        |	И ЭкспонатыНаСкладахОстатки.Экспонат.Идентификатор = &Идентификатор";
    
    Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        Сообщение = "Экспонат найден:" + Символы.ПС +
                    "Название: " + Выборка.Название + Символы.ПС +
                    "Номер гос. учета: " + Выборка.Идентификатор + Символы.ПС +
                    "Дата приемки: " + Формат(Выборка.ДатаПриемки, "ДЛФ=DD") + Символы.ПС +
                    "Ячейка: " + Выборка.Ячейка;
    Иначе
        Сообщение = "";   
		Если Сообщение = "" Тогда
			Сообщение = "Экспонат отсутствует в базе или не привязан к уведомлениям.";
		КонецЕсли;
    КонецЕсли;
    
    Возврат Сообщение;
КонецФункции   

&НаСервере
Функция ПользовательЗарегистрирован(ID_Пользователя)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ 
		|   КОЛИЧЕСТВО(*) КАК Кол
        |ИЗ
        |   РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
        |ГДЕ
        |   Telegram_Пользователи.ID_Пользователя = &ID_Пользователя";
    
    Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
    Количество = РезультатЗапроса.Кол;

	Возврат Количество > 0;
КонецФункции

#КонецОбласти